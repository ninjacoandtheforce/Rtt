//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rtt.Web.ContactServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Rtt.Wcf", ConfigurationName="ContactServiceReference.ContactService", SessionMode=System.ServiceModel.SessionMode.NotAllowed)]
    public interface ContactService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Rtt.Wcf/IBaseServiceOf_ContactDto/Create", ReplyAction="Rtt.Wcf/IBaseServiceOf_ContactDto/CreateResponse")]
        Rtt.Models.ContactDto Create(Rtt.Models.ContactDto item);
        
        [System.ServiceModel.OperationContractAttribute(Action="Rtt.Wcf/IBaseServiceOf_ContactDto/Create", ReplyAction="Rtt.Wcf/IBaseServiceOf_ContactDto/CreateResponse")]
        System.Threading.Tasks.Task<Rtt.Models.ContactDto> CreateAsync(Rtt.Models.ContactDto item);
        
        [System.ServiceModel.OperationContractAttribute(Action="Rtt.Wcf/IBaseServiceOf_ContactDto/Delete", ReplyAction="Rtt.Wcf/IBaseServiceOf_ContactDto/DeleteResponse")]
        Rtt.Models.ContactDto Delete(Rtt.Models.ContactDto item);
        
        [System.ServiceModel.OperationContractAttribute(Action="Rtt.Wcf/IBaseServiceOf_ContactDto/Delete", ReplyAction="Rtt.Wcf/IBaseServiceOf_ContactDto/DeleteResponse")]
        System.Threading.Tasks.Task<Rtt.Models.ContactDto> DeleteAsync(Rtt.Models.ContactDto item);
        
        [System.ServiceModel.OperationContractAttribute(Action="Rtt.Wcf/IBaseServiceOf_ContactDto/Update", ReplyAction="Rtt.Wcf/IBaseServiceOf_ContactDto/UpdateResponse")]
        Rtt.Models.ContactDto Update(Rtt.Models.ContactDto item);
        
        [System.ServiceModel.OperationContractAttribute(Action="Rtt.Wcf/IBaseServiceOf_ContactDto/Update", ReplyAction="Rtt.Wcf/IBaseServiceOf_ContactDto/UpdateResponse")]
        System.Threading.Tasks.Task<Rtt.Models.ContactDto> UpdateAsync(Rtt.Models.ContactDto item);
        
        [System.ServiceModel.OperationContractAttribute(Action="Rtt.Wcf/IBaseServiceOf_ContactDto/GetAll", ReplyAction="Rtt.Wcf/IBaseServiceOf_ContactDto/GetAllResponse")]
        Rtt.Models.ContactDto[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="Rtt.Wcf/IBaseServiceOf_ContactDto/GetAll", ReplyAction="Rtt.Wcf/IBaseServiceOf_ContactDto/GetAllResponse")]
        System.Threading.Tasks.Task<Rtt.Models.ContactDto[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Rtt.Wcf/IBaseServiceOf_ContactDto/GetById", ReplyAction="Rtt.Wcf/IBaseServiceOf_ContactDto/GetByIdResponse")]
        Rtt.Models.ContactDto GetById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="Rtt.Wcf/IBaseServiceOf_ContactDto/GetById", ReplyAction="Rtt.Wcf/IBaseServiceOf_ContactDto/GetByIdResponse")]
        System.Threading.Tasks.Task<Rtt.Models.ContactDto> GetByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ContactServiceChannel : Rtt.Web.ContactServiceReference.ContactService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContactServiceClient : System.ServiceModel.ClientBase<Rtt.Web.ContactServiceReference.ContactService>, Rtt.Web.ContactServiceReference.ContactService {
        
        public ContactServiceClient() {
        }
        
        public ContactServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Rtt.Models.ContactDto Create(Rtt.Models.ContactDto item) {
            return base.Channel.Create(item);
        }
        
        public System.Threading.Tasks.Task<Rtt.Models.ContactDto> CreateAsync(Rtt.Models.ContactDto item) {
            return base.Channel.CreateAsync(item);
        }
        
        public Rtt.Models.ContactDto Delete(Rtt.Models.ContactDto item) {
            return base.Channel.Delete(item);
        }
        
        public System.Threading.Tasks.Task<Rtt.Models.ContactDto> DeleteAsync(Rtt.Models.ContactDto item) {
            return base.Channel.DeleteAsync(item);
        }
        
        public Rtt.Models.ContactDto Update(Rtt.Models.ContactDto item) {
            return base.Channel.Update(item);
        }
        
        public System.Threading.Tasks.Task<Rtt.Models.ContactDto> UpdateAsync(Rtt.Models.ContactDto item) {
            return base.Channel.UpdateAsync(item);
        }
        
        public Rtt.Models.ContactDto[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<Rtt.Models.ContactDto[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public Rtt.Models.ContactDto GetById(int id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<Rtt.Models.ContactDto> GetByIdAsync(int id) {
            return base.Channel.GetByIdAsync(id);
        }
    }
}
